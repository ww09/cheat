maven 命令的格式为 mvn [plugin-name]:[goal-name]
-D 指定参数;-P 指定 Profile 配置;-e 显示maven运行出错的信息;
-o 离线执行命令,即不去远程仓库更新包;-X 显示maven允许的debug信息;
-U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次
-Dmaven.test.skip=true;-DskipTests;
-Dcheckstyle.skip=true;-Dmaven.javadoc.skip=true
1. 创建maven项目：mvn archetype:generate
2. 验证项目是否正确：mvn validate
3. maven 打包：mvn package
4. 只打jar包：mvn jar:jar
5. 生成源码jar包：mvn source:jar
6. 产生应用需要的任何额外的源代码：mvn generate-sources
7. 编译源代码： mvn compile
8. 编译测试代码：mvn test-compile
9. 运行测试：mvn test
10. 运行检查：mvn verify
11. 发布项目到远程仓库：mvn:deploy
12. 在集成测试可以运行的环境中处理和发布包：mvn integration-test
13. 显示maven依赖树：mvn dependency:tree
14. 显示maven依赖列表：mvn dependency:list
15. 下载依赖包的源码：mvn dependency:sources
16. 安装本地jar到本地仓库：mvn install:install-file -DgroupId=packageName -DartifactId=projectName -Dversion=version -Dpackaging=jar -Dfile=path
17. 查看帮助信息：mvn help:help 或 mvn help:help -Ddetail=true
18. 查看插件的帮助信息:mvn <plug-in>:help mvn dependency:help
19. 查看插件的帮助信息:mvn help:describe -Dplugin=help 。
-Dfull获得全部消息;-Dplugin=compiler -Dmojo=compile 获取单个目标的信息参数[此命令列出了Compiler 插件的compile 目标的所有信息]
20. 列出“有效的 (effective)”POM，mvn help:effective-pom�
 
 
web项目相关命令
1. 启动tomcat：mvn tomcat:run
2. 启动jetty：mvn jetty:run
3. 运行打包部署：mvn tomcat:deploy
4. 撤销部署：mvn tomcat:undeploy
5. 启动web应用：mvn tomcat:start
6. 停止web应用：mvn tomcat:stop
7. 重新部署：mvn tomcat:redeploy
8. 部署展开的war文件：mvn war:exploded tomcat:explode
